#!/bin/bash

helpmsg() {
    echo -e 'usage: ./rr [input] [label] (-1) ($@)'
    echo -e 'usage: ./rr [input] [label] [0] [cmin cmax] ($@)'
    echo -e 'usage: ./rr [input] [label] [interval] ($@)\n'
    echo -e '   -b, --bpix        evaluate bpix tracklets only'
    echo -e '   -f, --file        output commands'
    echo -e '   -g, --group       semaphore group id'
    echo -e '   -h, --help        show (this) help message'
    echo -e '   -i, --incl        apply inclusive corrections'
    echo -e '   -j, --jobs        jobs relative to number of cores'
    echo -e '   -m, --mm          mm option'
    echo -e '   -n, --nice        nice'
    echo -e '   -p, --pileup      pass output to pp\n'
}

ARGS=()

while [ $# -gt 0 ]; do
    case "$1" in
        -b|--bpix)      BPIX=1; shift ;;
        -f)             FILE="$2"; shift 2 ;;
        --file=*)       FILE="${1#*=}"; shift ;;
        -g)             GROUP="$2"; shift 2 ;;
        --group=*)      GROUP="${1#*=}"; shift ;;
        -h|--help)      helpmsg; exit ;;
        -i|--incl)      INCL=1; shift ;;
        -j)             JOBS="$2"; shift 2 ;;
        --jobs=*)       JOBS="${1#*=}"; shift ;;
        -m)             MMOPT="$2"; shift 2 ;;
        --mm=*)         MMOPT="${1#*=}"; shift ;;
        -n)             NICE="$2"; shift 2 ;;
        --nice=*)       NICE="${1#*=}"; shift ;;
        -p|--pileup)    PILEUP=1; shift ;;
        -*|--*)         [[ $1 =~ ^-?[0-9]+$ ]] && \
                            { ARGS+=("$1"); shift; } || \
                            { echo -e "invalid option: $1\n"; exit 1; } ;;
        *)              ARGS+=("$1"); shift ;;
    esac
done

set -- "${ARGS[@]}"

[[ $# -lt 3 ]] && { helpmsg; exit 1; }

FLAGS="--linebuffer"
GROUP=${GROUP:-"def"}
JOBS=${JOBS:-"+0"}
NICE=${NICE:-10}

BTYPES=(12 13 14 23 24 34); FTYPES=(15 16 17)
TYPES=( "${BTYPES[@]}" )
[ -n "$BPIX" ] || TYPES+=( "${FTYPES[@]}" )

EXEC=eval
[ -n "$FILE" ] && { EXEC=echo; exec &>> $FILE; }

$EXEC 'make reap_results merge_monads collect_cents || exit 1';

if [[ $3 -gt 0 ]]; then
    [ $# -ge 8 ] && ESTAG=${8}
    [ $# -ge 12 ] && PUTAG=${12}

    for (( CMAX=20; CMAX>=$3; CMAX-=$3 )); do
        CMIN=$(( CMAX - $3 ))

        [ -n "$INCL" ] || CTAG=.a.$CMIN.$CMAX
        [[ $# -ge 8 && $ESTAG != "null" ]] && {
            set -- "${@:1:7}" "${ESTAG}$CTAG" "${@:9}"; }
        [[ $# -ge 12 && $PUTAG != "null" ]] && {
            set -- "${@:1:11}" "${PUTAG}$CTAG" "${@:13}"; }
        for TYPE in ${TYPES[@]}; do
            CMD='nice -n $NICE sem -j$JOBS --id sem-grp-rr-$GROUP $FLAGS \
                    "./reap_results $TYPE $1 $2.a.$CMIN.$CMAX \
                    $CMIN $CMAX $4$CTAG $5 ${@:6} \
                    > notes/log-rr-$2.a.$CMIN.$CMAX-$TYPE.log"'
            $EXEC `eval echo $CMD`
        done
    done
    $EXEC sem --id sem-grp-rr-$GROUP --wait

    for (( CMAX=20; CMAX>=$3; CMAX-=$3 )); do
        CMIN=$(( CMAX - $3 ))

        $EXEC ./merge_monads $2.a.$CMIN.$CMAX $MMOPT
        [ -n "$PILEUP" ] && {
            [ -n "$INCL" ] || CTAG=.a.$CMIN.$CMAX;
            $EXEC ./purge_pileup $2.a.$CMIN.$CMAX $4$CTAG $4$CTAG; }
    done

    $EXEC ./collect_cents $2.a $3
elif [[ $3 -eq 0 ]]; then
    [[ $# -lt 5 ]] && exit 2
    [ $# -ge 10 ] && ESTAG=${10}
    [ $# -ge 14 ] && PUTAG=${14}

    [ -n "$INCL" ] || CTAG=.s.$4.$5
    [[ $# -ge 10 && $ESTAG != "null" ]] && {
        set -- "${@:1:9}" "${ESTAG}$CTAG" "${@:11}"; }
    [[ $# -ge 14 && $PUTAG != "null" ]] && {
        set -- "${@:1:13}" "${PUTAG}$CTAG" "${@:15}"; }
    for TYPE in ${TYPES[@]}; do
        CMD='nice -n $NICE sem -j$JOBS --id sem-grp-rr-$GROUP $FLAGS \
                "./reap_results $TYPE $1 $2.s.$4.$5 \
                $4 $5 $6$CTAG $7 ${@:8} \
                > notes/log-rr-$2.s.$4.$5-$TYPE.log"'
        $EXEC `eval echo $CMD`
    done
    $EXEC sem --id sem-grp-rr-$GROUP --wait

    $EXEC ./merge_monads $2.s.$4.$5 $MMOPT
    [ -n "$PILEUP" ] && {
        $EXEC ./purge_pileup $2.s.$4.$5 $6$CTAG $6$CTAG; }
else
    for TYPE in ${TYPES[@]}; do
        CMD='nice -n $NICE sem -j$JOBS --id sem-grp-rr-$GROUP $FLAGS \
                "./reap_results $TYPE ${@:1:2} 0 20 ${@:4} \
                > notes/log-rr-$2-$TYPE.log"'
        $EXEC `eval echo $CMD`
    done
    $EXEC sem --id sem-grp-rr-$GROUP --wait

    $EXEC ./merge_monads $2 $MMOPT
    [[ -n "$PILEUP" && $# -gt 3 ]] && {
        $EXEC ./purge_pileup $2 $4 $4; }
fi

[ -n "$FILE" ] && {
    sort $FILE -u -o $FILE.tmp;
    grep make $FILE.tmp > $FILE;
    grep reap_results $FILE.tmp | grep -v make >> $FILE;
    grep -- '--wait' $FILE.tmp >> $FILE;
    grep merge_monads $FILE.tmp | grep -v make >> $FILE;
    grep purge_pileup $FILE.tmp | grep -v make >> $FILE;
    rm $FILE.tmp
}
